#! /bin/bash
set -u
setup () 
{ 
    source "../../utils/../bash-boost.bash";
    require array;
    DO_TEST_SUBSHELL=false;
    : テストデータ;
    function __data_init () 
    { 
        declare -g -a array_int=($(seq 0 31));
        declare -g -a array_str=($(ls -1 /) "a b c");
        declare -g -a dst=()
    }
    function __lambda() {
        local val="${1}";
        local index="${2}";
        echo "val='${val}', index='${index}'";
    }
    __required_files
}
test__array_exists___success () 
{ 
    __data_init;
    : テスト実行;
    echo "@@@ int 配列";
    echo "array_int=("${array_int[@]}")";
    do_test_t array_exists array_int 10 || return $(failure);
    do_test_t array_exists array_int 20 || return $(failure);
    do_test_t array_exists array_int 30 || return $(failure);
    echo "@@@ string 配列";
    echo "array_str=("${array_str[@]}")";
    do_test_t array_exists array_str etc || return $(failure);
    do_test_t array_exists array_str sbin || return $(failure);
    do_test_t array_exists array_str bin || return $(failure);
    do_test_t array_exists array_str "a b c" || return $(failure);
    return $(success)
}
test__array_exists___error () 
{ 
    __data_init;
    : テスト実行;
    echo "@@@ int 配列";
    echo "array_int=("${array_int[@]}")";
    do_test_f array_exists array_int 100 || return $(failure);
    do_test_f array_exists array_int 200 || return $(failure);
    do_test_f array_exists array_int 300 || return $(failure);
    : テスト実行;
    echo "@@@ string 配列";
    echo "array_str=("${array_string[@]}")";
    do_test_f array_exists array_str foo || return $(failure);
    do_test_f array_exists array_str bar || return $(failure);
    do_test_f array_exists array_str baz || return $(failure);
    do_test_f array_exists array_str "x y z" || return $(failure);
    return $(success)
}
test__array_copy___success () 
{ 
    __data_init;
    do_test_t array_copy array_int dst || return $(failure);
    do_test_t array_map dst __lambda   || return $(failure);
    return $(success)
}
test__array_copy___error () 
{ 
    : テストスキップ;
    return $(skipped)
}
test__array_map___success () 
{ 
    __data_init;
    do_test_t array_map array_int __lambda || return $(failure);
    return $(success)
}
test__array_map___error () 
{ 
    : テストスキップ;
    return $(skipped)
}
test__array_clear___success () 
{ 
    __data_init;
    echo "@@@ before";
    do_test_t array_length array_int       || return $(failure);
    do_test_t array_map array_int __lambda || return $(failure);
    echo "@@@ call array_clear()";
    do_test_t array_clear array_int        || return $(failure);
    echo "@@@ after";
    do_test_t array_length array_int       || return $(failure);
    do_test_t array_map array_int __lambda || return $(failure);
    return $(success)
}
test__array_clear___error () 
{ 
    : テストスキップ;
    return $(skipped)
}
test__array_length___success () 
{ 
    __data_init;
    do_test_t array_length array_int || return $(failure)
    do_test_t array_length array_str || return $(failure)
}
test__array_length___error () 
{ 
    : テストスキップ;
    return $(skipped)
}
teardown () 
{ 
    :
}
